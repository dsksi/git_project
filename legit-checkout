#!/usr/bin/perl -w

use File::Compare;
use File::Copy;
use File::Basename;

if (! -d ".legit") {
    die "legit-checkout: error: no .legit directory containing legit repository exists\n"
}

if (! -f ".legit/log") {
    die "legit-checkout: error: your repository does not have any commits yet\n";
}

if (@ARGV != 1) {
    die "usage: legit-checkout <branch>\n";
}


$bname = $ARGV[0];
chomp $bname;

if (! -f ".legit/branch/$bname") {
    die "legit-checkout: error: unknown branch '$bname'\n";
}

# check if already on branch
open $HEAD, '<', '.legit/HEAD';
$currbranch = <$HEAD>;
close $HEAD;
$currbranch =~ s/^branch\///;
chomp $currbranch;

if ("$currbranch" eq "$bname") {
    die "Already on '$bname'\n";
}

# Get head commit of current branch
open $HEAD, '<', ".legit/branch/$currbranch";
$headcommit = <$HEAD>;
close $HEAD;
chomp $headcommit;

open $f, '<', ".legit/objects/$headcommit";
@rcommit = <$f>;
close $f;

foreach $line (@rcommit) {
    # skip line recording parent commit file
    # store all data object hash into hash set
    # key = filename, value = sha hash
    
    my ($type, $hash, $name) = split(' ', $line);
    next if "$type" eq 'parent';
    chomp $name;
    $rcSet{$name} = $hash;
}


# Get index
open $f, '<', ".legit/index";
@index = <$f>;
close $f;

foreach $line (@index) {
    # store all data object hash into hash set
    # key = filename, value = sha hash
    
    my ($type, $hash, $name) = split(' ', $line);
    chomp $name;
    $indexSet{$name} = $hash;
}

# Get head commit of target branch
open $HEAD, '<', ".legit/branch/$bname" or die "fail open branch target\n";
$tcommit = <$HEAD>;
close $HEAD;
chomp $tcommit;

open $f, '<', ".legit/objects/$tcommit";
@target = <$f>;
close $f;

foreach $line (@target) {
    # skip line recording parent commit file
    # store all data object hash into hash set
    # key = filename, value = sha hash
    
    my ($type, $hash, $name) = split(' ', $line);
    next if "$type" eq 'parent';
    chomp $name;
    $targetSet{$name} = $hash;
}

# Check for checkout errors
# Check if target branch commit is different to recent commit
while (($fname, $fhash) = each %rcSet) {
    if(exists $targetSet{$fname}) {
        next if ($targetSet{$fname} eq $fhash);
    } else {
        # file not in target branch
        if( ! exists $indexSet{$fname} ) {
            #bugggg TODO
            # file not in index and working directory is okay
            next if ( ! -f "$fname");
            #print "error difference: not in target, but in working directory";
            #$diff{$fname} = 1;
            #next;
        }
    }
    if(exists $indexSet{$fname}) {
        if($indexSet{$fname} ne $fhash) {
            $diff{$fname} = 1;
        } elsif(compare($fname, ".legit/objects/$fhash") != 0) {
            $diff{$fname} = 1;
        }
    } else {
        # unsure TODO : about this part
        $diff{$fname} = 1;
    }
    # what to do when not in index?
}

while (($fname, $fhash) = each %targetSet) {
    next if(exists $rcSet{$fname});
    if(exists $indexSet{$fname}) {
        next if($indexSet{$fname} eq $fhash && ! -f $fname);
        $diff{$fname} = 1;
        next;
    }

    if(-f $fname) {
        $diff{$fname} = 1;
    }
}



# Error detected:
if (%diff) {
    print "legit-checkout: error: Your changes to the following files would be overwritten by checkout:\n";
    foreach $dfile (keys %diff) {
        print "$dfile\n";
    }
    exit 1;
}

while (($fname, $fhash) = each %rcSet) {
    if (exists $targetSet{$fname}) {
        # check if target commit file hash is same as recent commit's
        next if ($targetSet{$fname} eq $fhash);
        copy(".legit/objects/$targetSet{$fname}", "$fname");
    } else {
        # remove the file if not in target branch commit
        unlink $fname;
    }
}

while (($fname, $fhash) = each %targetSet) {
    if (! exists $rcSet{$fname} && ! exists $indexSet{$fname}) {
        copy(".legit/objects/$fhash", $fname);
        push(@index, "blob $fhash $fname");
    }
    next if (-f "$fname");
    copy(".legit/objects/$fhash", $fname);
}

# move head to the different branch
open $f, '>', '.legit/HEAD';
print $f "branch/$bname";
close $f;

foreach $line (@index) {
    my ($type, $hash, $name) = split(' ', $line);
    chomp $name;
    if (exists $targetSet{$name}) {
        next if (exists $rcSet{$name} && $targetSet{$name} eq $rcSet{$name});
        $hash = $targetSet{$name};
        $line = $type.' '.$hash.' '.$name;
    }
}

open $f, '>', '.legit/index';
foreach $line (@index) {
    chomp $line;
    print $f "$line\n";
}
close $f;

print "Switched to branch '$bname'\n";
exit 0;
